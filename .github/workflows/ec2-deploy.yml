# EC2 서버 자동 배포 워크플로우
name: Deploy to EC2 Server

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hmseok/ride-hmseok

jobs:
  # 백엔드 빌드 및 Docker 이미지 생성
  backend-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        cache-dependency-path: backend-unified/pom.xml
        
    - name: Build with Maven
      run: |
        cd backend-unified
        mvn clean package -DskipTests -T 1C
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-unified
        file: ./backend-unified/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        platforms: linux/amd64
        # Docker 캐시 문제 해결을 위해 캐시 설정 제거
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  # 프론트엔드 빌드 및 Docker 이미지 생성
  frontend-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        platforms: linux/amd64
        # Docker 캐시 문제 해결을 위해 캐시 설정 제거
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  # EC2 서버 배포 (메인 브랜치에 푸시될 때만)
  deploy-to-ec2:
    needs: [backend-docker, frontend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # 프로젝트 디렉토리로 이동
          cd ~/ride-hmseok
          
          # 환경 변수 설정
          export REGISTRY="${{ env.REGISTRY }}"
          export IMAGE_NAME="${{ env.IMAGE_NAME }}"
          export GITHUB_SHA="${{ github.sha }}"
          
          # Docker 로그인
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # 기존 컨테이너 중지 및 제거
          docker-compose down || true
          
          # 새 이미지 pull
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          
          # 환경 변수 파일 생성
          cat > .env << EOF
          COMPOSE_PROJECT_NAME=ride-prod
          SPRING_PROFILES_ACTIVE=prod
          DB_HOST=localhost
          DB_PORT=3306
          DB_NAME=taskmanagement
          DB_USERNAME=root
          DB_PASSWORD=password
          BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          FRONTEND_PORT=80
          NGINX_PORT=80
          NGINX_SSL_PORT=443
          EOF
          
          # 새 이미지로 컨테이너 시작 (프로덕션 프로필 사용)
          docker-compose --profile production up -d
          
          # 배포 상태 확인
          docker-compose ps
          
          # 서비스 상태 확인
          sleep 10
          curl -f http://localhost/api/health || echo "Backend health check failed"
          curl -f http://localhost/ || echo "Frontend health check failed"
